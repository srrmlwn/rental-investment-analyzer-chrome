# Cursor Rules for Rental Investment Analyzer Chrome Extension

## 1. Project Context
- This is a Chrome extension for analyzing rental investment properties on Zillow.
- The extension extracts property data, estimates rental income (using HUD data), and calculates investment metrics (cap rate, cash flow, etc.).
- The project uses a modular structure: `src/` contains content scripts, background scripts, services, utils, and constants.
- GitHub Repository: https://github.com/srrmlwn/rental-investment-analyzer-chrome

## 2. File/Directory Priorities
- Always keep the following files in context for architectural and requirements reference:
  - `docs/README.md`
  - `docs/architecture/tech-architecture.md`
  - `docs/architecture/component-injection.md`
  - `docs/architecture/repository.md`
  - `docs/specs/product-specs.md`
  - `docs/tasks/task-breakdown.md`
  - `docs/development.md`
- For code context, prioritize:
  - `src/constants/selectors.js`
  - `src/services/dataExtractor.js`
  - `src/content/content.js`
  - Any file in `src/content/`, `src/background/`, `src/services/`, `src/utils/`, and `src/constants/`

## 3. Data Extraction & Business Logic
- Data extraction logic is in `src/services/dataExtractor.js` and uses selectors from `src/constants/selectors.js`.
- HUD data is stored in `src/data/hud_rental_data.json` and accessed via a service.
- Business logic for analysis is in `src/services/propertyAnalyzer.js`.
- Component injection and modal handling is documented in `docs/architecture/component-injection.md`.

## 4. Workflow Reminders
- When starting a new chat, always:
  1. Reference the latest `tech-architecture.md` and `README.md` for project goals and structure.
  2. Check for updates in `src/constants/selectors.js` and `src/services/dataExtractor.js` for data extraction logic.
  3. If working on UI, check `src/content/content.js` and `docs/architecture/component-injection.md`.
  4. If working on HUD data, check `src/data/hud_rental_data.json` and related service files.
  5. Review current tasks in `docs/tasks/task-breakdown.md`.
  6. Check repository status at https://github.com/srrmlwn/rental-investment-analyzer-chrome

## 5. Git & Collaboration
- All changes should be committed with clear messages following conventional commits format.
- Use feature branches for new features or major changes.
- Keep `.gitignore` and `package.json` up to date.
- Follow the branch strategy and PR process documented in `docs/architecture/repository.md`.

## 6. Testing
- Unit tests are in `tests/unit/`
- Integration tests are in `tests/integration/`
- Use `npm run test` to run all tests.
- Follow testing guidelines in `docs/development.md`.

## 7. Build & Run
- Use `npm run build` to build the extension.
- Use `npm run dev` for development with hot reload.
- Load the extension from the `dist/` directory in Chrome.
- Follow deployment process in `docs/development.md`.

## 8. Component Injection
- Current focus is on improving modal detection and property details targeting.
- Follow the implementation details in `docs/architecture/component-injection.md`.
- Use the debugging tools and logging system documented in `docs/development.md`.
- Monitor performance and error handling as per best practices.

## 9. General
- Always clarify requirements or context if unsure.
- Maintain modularity and separation of concerns in code.
- Document new features or changes in appropriate docs.
- Keep track of status of tasks in `docs/tasks/task-breakdown.md`.
- Follow security best practices and report issues through GitHub Security Advisories.
- Stay updated with the repository at https://github.com/srrmlwn/rental-investment-analyzer-chrome 