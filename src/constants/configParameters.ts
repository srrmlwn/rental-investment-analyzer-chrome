import { ConfigParameter, ConfigCategory, InvestmentParams } from '@/types/investment';

export const CONFIG_PARAMETERS: ConfigParameter[] = [
  // Purchase Parameters
  {
    key: 'propertyPrice',
    label: 'Property Price',
    category: 'Purchase',
    type: 'currency',
    description: 'The total purchase price of the property',
    isListingSpecific: true,
    isAutoFilled: true,
    min: 50000,
    max: 2000000,
    step: 1000,
    unit: '$',
    default: 300000,
  },
  {
    key: 'downPaymentPercent',
    label: 'Down Payment',
    category: 'Purchase',
    type: 'percentage',
    description: 'Percentage of property price paid as down payment',
    isListingSpecific: false,
    min: 5,
    max: 100,
    step: 1,
    unit: '%',
    default: 20,
  },
  {
    key: 'closingCostsPercent',
    label: 'Closing Costs',
    category: 'Purchase',
    type: 'percentage',
    description: 'Percentage of property price for closing costs',
    isListingSpecific: false,
    isAdvanced: true,
    min: 1,
    max: 5,
    step: 0.1,
    unit: '%',
    default: 3,
  },

  // Loan Parameters
  {
    key: 'interestRate',
    label: 'Interest Rate',
    category: 'Loan',
    type: 'percentage',
    description: 'Annual mortgage interest rate',
    isListingSpecific: false,
    min: 3,
    max: 12,
    step: 0.25,
    unit: '%',
    default: 7.5,
  },
  {
    key: 'loanTermYears',
    label: 'Loan Term',
    category: 'Loan',
    type: 'integer',
    description: 'Length of mortgage in years',
    isListingSpecific: false,
    min: 10,
    max: 30,
    step: 5,
    default: 30,
  },
  {
    key: 'points',
    label: 'Points',
    category: 'Loan',
    type: 'percentage',
    description: 'Mortgage points paid to lower interest rate',
    isListingSpecific: false,
    isAdvanced: true,
    min: 0,
    max: 3,
    step: 0.25,
    unit: '%',
    default: 0,
  },

  // Operating Expenses
  {
    key: 'propertyManagementPercent',
    label: 'Property Management',
    category: 'Operating',
    type: 'percentage',
    description: 'Percentage of rent paid to property manager',
    isListingSpecific: false,
    min: 0,
    max: 30,
    step: 0.5,
    unit: '%',
    default: 8,
  },
  {
    key: 'maintenanceReservePercent',
    label: 'Maintenance Reserve',
    category: 'Operating',
    type: 'percentage',
    description: 'Annual maintenance reserve as percentage of property value',
    isListingSpecific: false,
    min: 0.5,
    max: 3,
    step: 0.1,
    unit: '%',
    default: 1,
  },
  {
    key: 'insuranceRate',
    label: 'Insurance Rate',
    category: 'Operating',
    type: 'percentage',
    description: 'Annual insurance rate as percentage of property value',
    isListingSpecific: false,
    min: 0.1,
    max: 2,
    step: 0.1,
    unit: '%',
    default: 0.5,
  },
  {
    key: 'propertyTaxRate',
    label: 'Property Tax Rate',
    category: 'Operating',
    type: 'percentage',
    description: 'Annual property tax rate as percentage of property value',
    isListingSpecific: false,
    min: 0.1,
    max: 3,
    step: 0.1,
    unit: '%',
    default: 1.1,
  },
  {
    key: 'hoaFees',
    label: 'HOA Fees',
    category: 'Operating',
    type: 'currency',
    description: 'Monthly HOA fees',
    isListingSpecific: false,
    min: 0,
    step: 10,
    unit: '$',
    default: 0,
  },
  {
    key: 'vacancyRatePercent',
    label: 'Vacancy Rate',
    category: 'Operating',
    type: 'percentage',
    description: 'Expected vacancy rate as percentage of annual rent',
    isListingSpecific: false,
    min: 0,
    max: 20,
    step: 0.5,
    unit: '%',
    default: 5,
  },

  // Growth Assumptions
  {
    key: 'annualAppreciation',
    label: 'Annual Appreciation',
    category: 'Growth',
    type: 'percentage',
    description: 'Expected annual property value appreciation',
    isListingSpecific: false,
    min: 0,
    max: 10,
    step: 0.5,
    unit: '%',
    default: 3,
  },
  {
    key: 'annualRentGrowth',
    label: 'Annual Rent Growth',
    category: 'Growth',
    type: 'percentage',
    description: 'Expected annual rent growth rate',
    isListingSpecific: false,
    min: 0,
    max: 10,
    step: 0.5,
    unit: '%',
    default: 2,
  },
  {
    key: 'annualExpenseGrowth',
    label: 'Annual Expense Growth',
    category: 'Growth',
    type: 'percentage',
    description: 'Expected annual expense growth rate',
    isListingSpecific: false,
    min: 0,
    max: 10,
    step: 0.5,
    unit: '%',
    default: 2,
  },

  // Tax Parameters
  {
    key: 'marginalTaxRate',
    label: 'Marginal Tax Rate',
    category: 'Tax',
    type: 'percentage',
    description: 'Your marginal tax rate for tax benefit calculations',
    isAdvanced: true,
    min: 10,
    max: 37,
    step: 1,
    unit: '%',
    default: 24,
  },
  {
    key: 'depreciationPeriod',
    label: 'Depreciation Period',
    category: 'Tax',
    type: 'integer',
    description: 'Number of years for property depreciation',
    isAdvanced: true,
    min: 27.5,
    max: 39,
    step: 0.5,
    default: 27.5,
  },

  // Analysis Parameters
  {
    key: 'analysisPeriod',
    label: 'Analysis Period',
    category: 'Analysis',
    type: 'integer',
    description: 'Number of years to analyze investment',
    isAdvanced: true,
    min: 5,
    max: 30,
    step: 5,
    default: 30,
  },
  {
    key: 'exitCapRate',
    label: 'Exit Cap Rate',
    category: 'Analysis',
    type: 'percentage',
    description: 'Expected cap rate at time of sale',
    isAdvanced: true,
    min: 3,
    max: 10,
    step: 0.25,
    unit: '%',
    default: 5,
  },
];

// Helper functions to get parameters
export function getParametersByCategory(category: ConfigCategory): ConfigParameter[] {
  return CONFIG_PARAMETERS.filter((param) => param.category === category);
}

export function getBasicParameters(): ConfigParameter[] {
  return CONFIG_PARAMETERS.filter((param) => !param.isAdvanced);
}

export function getAdvancedParameters(): ConfigParameter[] {
  return CONFIG_PARAMETERS.filter((param) => param.isAdvanced);
}

export function getParameterByKey(key: keyof InvestmentParams): ConfigParameter | undefined {
  return CONFIG_PARAMETERS.find((param) => param.key === key);
} 